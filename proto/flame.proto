syntax = "proto3";

// 用于无需带参的请求头
message NoneRequest {
    uint64 gw_id = 1;   // Gateway ID
}

// 用于只返回RetCode请求的响应
message FlameReply {
    uint32 code = 1;    // RetCode
    string msg  = 2;    // 消息，可为空
}

/**
 * Gateway Set
 */

// GW/Client与MGR建立连接的请求头
// @Reply: FlameReply
message ConnectRequest {
    uint64 gw_id        = 1;    // Gateway ID
	uint64 admin_addr   = 2;    // 控制平面地址，用于接收主动推送的信息
}

// 安全关闭一个GW/Client连接
// @Reply: FlameReply
message DisconnectRequest {
    uint64 gw_id = 1;   // Gateway ID
}

// 集群信息响应
// @Request: NoneRequest
message ClusterInfoReply {
    string name     = 1;
    uint32 mgrs     = 2;    // MGR节点数量
    uint32 csds     = 3;    // CSD节点数量
    uint64 size     = 4;
    uint64 alloced  = 5;
    uint64 used     = 6;
}

// 获取节点地址信息
message CsdIDListRequest {
    repeated uint64 csd_id_list = 1;    // csd id list
}

// CSD 地址信息单元
message CsdAddrItem {
    uint64 csd_id   = 1;
    uint64 io_addr  = 2;    // 数据平面 IO地址
    uint32 stat     = 3;    // 节点状态：DOWN/PAUSE/ACTIVE
}

// CSD地址信息响应
message CsdAddrListReply {
    repeated CsdAddrItem csd_list = 1;
}

/**
 * Volume Group Set
 */

// 列出所有的Volume Group
message VGListRequest {
    uint32 offset   = 1;
    uint32 limit    = 2;
}

message VGItem {
    uint64 vg_id    = 1;    // volume group id
	string name     = 2;
	uint64 ctime    = 3;    // 创建时间
	uint32 volumes  = 4;    // volume个数
	uint64 size     = 5;    // 总大小
    uint64 alloced  = 6;    // 逻辑分配空间
    uint64 used     = 7;    // 实际已占用空间（B）
}

message VGListReply {
   repeated VGItem vg_list = 1;
}

// 创建一个组
// @Reply: FlameReply
message VGCreateRequest {
	string vg_name = 1;    // vg name
}

// 删除一个组
// @Reply: FlameReply
message VGRemoveRequest {
    string vg_name = 1;    // vg name
}

// 重命名一个组
// @Reply: FlameReply
message VGRenameRequest {
    string old_vg_name = 1;
    string new_vg_name = 2;
}

/**
 * Volume Set
 */

// 列出指定VG下的所有Volume
message VolListRequest {
    string vg_name  = 1;
    uint32 offset   = 2;    // 用于分页，偏移
    uint32 limit    = 3;    // 用于分页，数量
}

message VolumeItem {
    uint64 vol_id   = 1;    // Volume的唯一标识
	uint64 vg_id    = 2;    // Group标识
	string name     = 3;    // Volume名称
	uint64 ctime    = 4;    // 创建时间
    uint64 chk_sz   = 5;    // Chunk Size
	uint64 size     = 6;    // 可视大小（B）
	uint64 alloced  = 7;    // 所需分配的空间（B）
	uint64 used     = 8;    // 实际已使用空间（B）
	uint32 flags    = 9;    // 标签
	uint32 spolicy  = 10;   // 存储策略
	uint32 chunks   = 11;   // Chunk Group 数量
}

message VolListReply {
    repeated VolumeItem vol_list = 1;
}

// 创建一个Volume
// @Reply: FlameReply
message VolCreateRequest {
    string vg_name  = 1;    // VG name
    string vol_name = 2;    // Volume名称
    uint64 chk_sz   = 3;    // Chunk Size
    uint64 size     = 4;    // 可视大小（B）
    uint32 flags    = 5;    // 标签
    uint32 spolicy  = 6;    // 存储策略
}

// 删除一个Volume
// @Reply: FlameReply
message VolRemoveRequest {
    string vg_name  = 1;
    string vol_name = 2;    // Volume名称
}

// 更改一个Volume的名称
// @Reply: FlameReply
message VolRenameRequest {
    string vg_name      = 1;
    string old_vol_name = 2;
    string new_vol_name = 3;
}

// 查看一个指定Volume的信息
message VolInfoRequest {
    string vg_name  = 1;
    string vol_name = 2;
}

message VolInfoReply {
    uint32 retcode = 1;
    VolumeItem vol = 2;
}

// 修改一个Volume的尺寸
// @Reply: FlameReply
message VolResizeRequest {
    string vg_name      = 1;
    string vol_name     = 2;
    uint64 new_size     = 3;
}

// 打开一个Volume，在MGR上注册打开信息
// @Reply: FlameReply
message VolOpenRequest {
    uint64 gw_id    = 1;
    string vg_name  = 2;
    string vol_name = 3;
}

// 关闭一个Volume
// @Reply: FlameReply
message VolCloseRequest {
    uint64 gw_id    = 1;
    string vg_name  = 2;
    string vol_name = 3;
}

// 锁定一个Volume，防止其他GW打开
// @Reply: FlameReply
message VolLockRequest {
    uint64 gw_id    = 1;
    string vg_name  = 2;
    string vol_name = 3;
}

// 解锁一个Volume
// @Reply: FlameReply
message VolUnlockRequest {
    uint64 gw_id    = 1;
    string vg_name  = 2;
    string vol_name = 3;
}

// 获取Volume的Chunk信息
message VolMapsRequest {
    uint64 vol_id = 1;  // Volume的唯一标识
}

message ChunkItem {
    uint64 chk_id   = 1;    // Chunk ID
    uint64 vol_id   = 2;
    uint32 index    = 3;
    uint32 stat     = 4;
    uint32 spolicy  = 5;
    uint64 primary  = 6;
	uint64 size     = 7;    // 可视大小（B）
	uint64 csd_id   = 8;    // 当前所在CSD ID
    uint64 dst_id   = 9;    // 目标CSD ID（迁移）
}

message VolMapsReply {
    repeated ChunkItem chk_list = 1;
}

/**
 * Chunk Set
 */

// 获取chunk的位置信息
message ChunkMapsRequest {
    repeated uint64 chk_id_list = 1;
}

message ChunkMapsReply {
    repeated ChunkItem chk_list = 1;
}

/**
 * FlameService
 */
service FlameService {
    /**
     * Gateway Set
     */
    
    // GW注册：建立一个Gw连接
    rpc connect (ConnectRequest) returns (FlameReply) {}

    // GW注销：关闭一个GW连接
    rpc disconnect(DisconnectRequest) returns (FlameReply) {}

    // 获取Flame集群信息
    rpc getClusterInfo(NoneRequest) returns (ClusterInfoReply) {}

    // 自动关闭Flame集群
    rpc shutdownCluster(NoneRequest) returns (FlameReply) {}

    // 自动清理Flame集群
    rpc cleanCluster(NoneRequest) returns (FlameReply) {}

    // 获取CSD地址信息，需要指定一系列CSD ID
    rpc pullCsdAddr(CsdIDListRequest) returns (CsdAddrListReply) {}

    /**
     * Group Set
     */
    
    // 获取所有VG信息，支持分页（需要提供<offset, limit>，以vg_name字典顺序排序）
    rpc getVolGroupList(VGListRequest) returns (VGListReply);

    // 创建VG
    rpc createVolGroup(VGCreateRequest) returns (FlameReply) {}

    // 删除VG
    rpc removeVolGroup(VGRemoveRequest) returns (FlameReply) {}

    // 重命名VG
    rpc renameVolGroup(VGRenameRequest) returns (FlameReply) {}

    /**
     * Volume Set
     */

    // 获取指定VG内的所有Volume信息
    rpc getVolumeList(VolListRequest) returns (VolListReply) {}

    // 创建Volume
    rpc createVolume(VolCreateRequest) returns (FlameReply) {}

    // 删除Volume
    rpc removeVolume(VolRemoveRequest) returns (FlameReply) {}

    // 重命名Volume
    rpc renameVolume(VolRenameRequest) returns (FlameReply) {}

    // 获取Volume信息
    rpc getVolumeInfo(VolInfoRequest) returns (VolInfoReply) {}

    // 更改Volume大小
    rpc resizeVolume(VolResizeRequest) returns (FlameReply) {}

    // 打开Volume：在MGR登记Volume访问信息（没有加载元数据信息）
    rpc openVolume(VolOpenRequest) returns (FlameReply) {}

    // 关闭Volume：在MGR消除Volume访问信息
    rpc closeVolume(VolCloseRequest) returns (FlameReply) {}

    // 锁定Volume：在MGR登记Volume锁定信息，防止其他GW打开Volume
    rpc lockVolume(VolLockRequest) returns (FlameReply) {}

    // 解锁Volume
    rpc unlockVolume(VolUnlockRequest) returns (FlameReply) {}

    // 获取Volume的Chunk信息
    rpc getVolumeMaps(VolMapsRequest) returns (VolMapsReply) {}

    /**
     * Chunk Set
     */

    // 获取指定Chunk信息
    rpc getChunkMaps(ChunkMapsRequest) returns (ChunkMapsReply) {}
    
} // service FlameService 
