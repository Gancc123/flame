syntax = "proto3";

// 用于只返回RetCode请求的响应
message InternalReply {
    uint32 code = 1;    // RetCode
    string msg  = 2;    // 消息，可为空
}

/**
 * CSD Set
 */

// CSD向MGR注册，并获取身份信息
message RegisterRequest {
    string csd_name     = 1;
    uint64 size         = 2;    // 可视大小，这里指SSD的容量（B）
    uint64 io_addr      = 3;    // 数据平面 IO地址
    uint64 admin_addr   = 4;    // 控制平面地址
    uint64 stat         = 5;
}

message RegisterReply {
    InternalReply retcode   = 1;
    uint64 csd_id       = 2;
    uint64 ctime        = 3;    // CSD注册完成时间
}

// CSD主动注销
// @Reply: InternalReply
message UnregisterRequest {
    uint64 csd_id = 1;
}

// CSD上线
// @Reply: InternalReply
message SignUpRequest {
    uint64 csd_id       = 1;
    uint32 stat         = 2;    // 节点状态：DOWN/PAUSE/ACTIVE
    uint64 io_addr      = 3;    // 数据平面 IO地址
	uint64 admin_addr   = 4;    // 控制平面地址
}

// CSD下线
// @Reply: InternalReply
message SignOutRequest {
    uint64 csd_id = 1;
}

// 心跳
// @Reply: InternalReply
message HeartBeatRequest {
    uint64 csd_id = 1;
}

// CSD状态汇报：报告CSD状态的变更情况
// @Reply: InternalReply
message StatusRequest {
    uint64 csd_id   = 1;
    uint32 stat     = 2;    // 节点状态：DOWN/PAUSE/ACTIVE
}

// 健康信息报告（CSD为单位/Chunk为单位）
message ChunkHealthItem {
    uint64 chk_id       = 1;    // Chunk ID
	uint64 size         = 2;
    uint32 stat         = 3;    // Chunk 状态
    uint64 used         = 4;
    uint64 csd_used     = 5;
    uint64 dst_used     = 6;    // 目标CSD已分配空间
    uint64 last_time    = 7;    // 上一次监控记录时间
    uint64 last_write   = 8;    // 上一个监控周期写次数
    uint64 last_read    = 9;    // 上一个监控周期读次数
    uint64 last_latency = 10;   // 上一个监控周期平均延迟（ns）
    uint64 last_alloc   = 11;   // 上一个监控周期新分配的空间（B）
}

// CSD健康信息汇报
// @Reply: InternalReply
message HealthRequest {
    uint64 csd_id       = 1;
    uint64 size         = 2;
    uint64 alloced      = 3;    // 需要分配的空间（B）
    uint64 used         = 4;    // 实际已使用的空间（B）
    uint64 last_time    = 5;    // 最后一次监控记录时间
    uint64 last_write   = 6;    // 上一个监控周期写次数
    uint64 last_read    = 7;    // 上一个监控周期读次数
    uint64 last_latency = 8;    // 上一个监控周期平均延迟（ns）
    uint64 last_alloc   = 9;    // 上一个监控周期新分配的空间（B）
    repeated ChunkHealthItem chunk_health_list = 10;
}

// 拉取关联chunk信息
message ChunkPullRequest {
	repeated uint64 chkid_list = 1; // Chunk ID List
}

message RelatedChunkItem {
    uint64 org_id = 1;  // Origin Chunk ID
    uint64 chk_id = 2;  // Related Chunk ID
    uint64 csd_id = 3;  // chk_id指向的Chunk所在CSD ID
    uint64 dst_id = 4;  // 目标CSD ID（迁移）
}

message ChunkPullReply {
    repeated RelatedChunkItem rchk_list = 1;
}

message ChunkPushItem {
    uint64 chk_id       = 1;    // Chunk ID
	uint32 stat         = 2;    // CSD状态
	uint64 csd_id       = 3;    // 当前所在CSD ID
	uint64 dst_id       = 4;    // 目标CSD ID（迁移）
    uint64 dst_mtime    = 5;    // 完成迁移时间
}

// 主动推送相关chunk状态信息
// @Reply: InternalReply
message ChunkPushRequest {
    repeated ChunkPushItem chk_list = 1;
}

/**
 * InternalService
 */
service InternalService {
    // CSD注册
    rpc registerCsd(RegisterRequest) returns (RegisterReply) {}

    // CSD注销
    rpc unregisterCsd(UnregisterRequest) returns (InternalReply) {}

    // CSD上线
    rpc signUp(SignUpRequest) returns (InternalReply) {}

    // CSD下线
    rpc signOut(SignOutRequest) returns (InternalReply) {}

    // CSD心跳汇报
    rpc pushHeartBeat(HeartBeatRequest) returns (InternalReply) {}

    // CSD状态汇报
    rpc pushStatus(StatusRequest) returns (InternalReply) {}

    // CSD健康信息汇报
    rpc pushHealth(HealthRequest) returns (InternalReply) {}

    // 拉取关联Chunk信息
    rpc pullRelatedChunk(ChunkPullRequest) returns (ChunkPullReply) {}

    // 推送Chunk相关信息
    rpc pushChunkStatus(ChunkPushRequest) returns (InternalReply) {}
}