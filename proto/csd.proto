syntax = "proto3";

// From CSD to CSD, Chunk
// 匹配Chunk信息，用于CSD之间比较Chunk版本
message CsdChunkFetchReq
{
    repeated uint64 chk_id = 1; //Chunk ID
}

message CsdChunkFetchRes
{
    uint64 used = 1;    //实际已使用的空间（B）
}

// 信息告知，用于同步CSD之间的Chunk行为
message ChunkSignalItem
{
    uint64 chk_id = 1;  //Chunk ID
    uint32 signal = 2;
}

message CsdChunkSignalReq
{
    repeated ChunkSignalItem signal_list = 1;
}

message CsdChunkSignalRes
{
    uint32 retcode = 1;
}

// From MGR to CSD, CSD
// 关闭CSD
message CsdShutDownReq
{
    uint64 csd_id = 1;
}

message CsdShutDownRes
{
    uint32 retcode = 1;
}

// 清理CSD
message CsdCleanReq
{
    uint64 csd_id = 1;
}

message CsdCleanRes
{
    uint32 retcode = 1;
}

// 创建chunk
message CsdChunkCreateReq
{
    uint64 chk_id = 1;  //Chunk ID
	uint64 cg_id = 2;   //Chunk Group ID
	uint64 parent = 3;  //为快照和CoW准备
	uint64 size = 4;    //可视大小（B）
	uint32 stat = 5;    //chunk状态
	uint64 csd_id = 6;  //当前所在CSD ID
	uint64 csd_mtime = 7;   //当前所在CSD的映射时间
}

message CsdChunkCreateRes
{
    uint32 retcode = 1;
}

// 选主副本
message CsdChunkChooseReq
{
    repeated uint64 chunkid_list = 1;
}

message CsdChunkChooseRes
{
    uint32 retcode = 1;
}

// 删除chunk
message CsdChunkDeleteReq
{
    repeated uint64 chkid_list = 1; //Chunk ID
}

message CsdChunkDeleteRes
{
    uint32 retcode = 1;
}

// 迁移Chunk
message CsdChunkMoveReq
{
    uint64 src_id = 1;
    uint64 dst_id = 2;
    uint64 chunk_id = 3;
    uint32 flag = 4;    //1表示通知迁移，2表示强制迁移
}

message CsdChunkMoveRes
{
    uint32 retcode = 1;
}

service CsdService
{
    // From CSD to CSD
    rpc CsdChunkFetch(CsdChunkFetchReq) returns (CsdChunkFetchRes) {}
    rpc CsdChunkSignal(CsdChunkSignalReq) returns (CsdChunkSignalRes) {}

    // From MGR to CSD
    rpc CsdShutDown(CsdShutDownReq) returns (CsdShutDownRes) {}
    rpc CsdClean(CsdCleanReq) returns (CsdCleanRes) {}
    rpc CsdChunkCreate(CsdChunkCreateReq) returns (CsdChunkCreateRes) {}
    rpc CsdChunkChoose(CsdChunkChooseReq) returns (CsdChunkChooseRes) {}
    rpc CsdChunkDeleet(CsdChunkDeleteReq) returns (CsdChunkDeleteRes) {}
    rpc CsdChunkMove(CsdChunkMoveReq) returns (CsdChunkMoveRes) {}
}